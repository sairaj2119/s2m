datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  uid        String      @id 
  email     String   @unique
  username  String   @unique
  avatar    String?   
  provider  String   
  profile   Profile?
  post Post[]
  like Like[]
  save Save[]
  reply Reply[]
  repliedTo Reply[] @relation("repliedToUser")
  followers Follow[] @relation("followed")
  following Follow[] @relation("follower")
  comment Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @default(cuid())
  bio String?
  displayName String?
  userId String
  user User @relation(fields: [userId], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Post{
  id String @id @default(cuid())
  url String 
  caption String?
  like Like[]
  save Save[]
  comment Comment[]
  reply Reply[]
  userId String
  user User @relation(fields: [userId], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())
  userId String
  postId String
  user User @relation(fields: [userId], references: [uid])
  post Post @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

model Save {
  id String @id @default(cuid())
  userId String
  postId String
  user User @relation(fields: [userId], references: [uid])
  post Post @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, postId])
}

model Comment {
  id String @id @default(cuid())
  commentText String
  userId String
  postId String
  user User @relation(fields: [userId], references: [uid])
  post Post @relation(fields: [postId], references: [id])
  reply Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Reply {
  id String @id @default(cuid())
  commentText String
  userId String
  postId String
  commentId String
  repliedToUserUid String?
  user User @relation(fields: [userId], references: [uid])
  post Post @relation(fields: [postId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])
  repliedToUser User? @relation("repliedToUser",fields: [repliedToUserUid], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id String @id @default(cuid())
  followedId String
  followerId String
  followed User @relation(name: "followed",fields: [followedId], references: [uid])
  follower User @relation(name: "follower", fields: [followerId], references: [uid])
  createdAt DateTime @default(now())
  @@unique([followedId, followerId])
}
//